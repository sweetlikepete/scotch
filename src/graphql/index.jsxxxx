

import gclient from "graphql-client";
import gql from "graphql";


const gqlError = (err) => {

    const error = new Error();

    error.name = "GraphQL Error";
    error.message = err.message;

    return error;

};


class GraphqlClient{

    /*
     * Create a graphQL Client.
     * @param {Object} req - Page request. On the server it's the express req
     * @param {Object} res - Page response. On the server it's the express res
     */
    constructor(req, res){

        this.req = req;
        this.res = res;

    }

    /*
     * Query the graph. On the server this query is done directly and so the
     * request and response need to be passed in from the originating express
     * handler. On the client a fetch call is made so there is no need to pass
     * and request response information.
     * @param {String} source - The graphql query source.
     * @param {Object} variables - Variables passed to the graph query.
     * @return {Object} Promise that resolves on complete of the query.
     */
    async query(source, variables){

        let response = null;

        // Webpack rewrites this reference to process through the DefinePlugin
        // eslint-disable-next-line no-process-env
        if(process.env.ENVIRONMENT === "server"){

            /*
             * Point to the production graphql on local development server if
             * you know what you're doing.
             */
            if(config.LOCAL && config.USE_PRODUCTION_GRAPH){

                const client = await gclient({
                    credentials: "same-origin",
                    url: `https://${ config.PRODUCTION_HOST }${ config.GRAPHQL_ENDPOINT }`
                });

                response = await client.query(source, variables);

                if(response.errors){
                    throw gqlError(response.errors[0]);
                }

            }else{

                const schema = require("questly/routers/graphql").schema(this.req);

                response = await gql.graphql({
                    contextValue: {
                        req: this.req,
                        res: this.res
                    },
                    schema,
                    source,
                    variableValues: variables
                });

                if(response.errors){
                    throw gqlError(response.errors[0]);
                }

            }

        }else{

            const protocol = window.location.protocol.replace(/:/g, "");
            const host = window.location.hostname;
            const port = window.location.port;

            const client = await gclient({
                credentials: "same-origin",
                url: `${ protocol }://${ host }:${ port }${ config.GRAPHQL_ENDPOINT }`
            });

            response = await client.query(source, variables);

            if(response.errors){
                throw gqlError(response.errors[0]);
            }

        }

        return response.data;

    }

}


const graphqlClientInstance = new GraphqlClient();


export {
    graphqlClientInstance as graphql,
    GraphqlClient
};
